version: "3.8"

services:
  # ============================================
  # Base de Datos PostgreSQL
  # ============================================
  db:
    image: postgres:15
    networks:
      - backend
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: reservas_db
      # Leer password desde secret
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    configs:
      - source: init_db_v1
        target: /docker-entrypoint-initdb.d/init-db.sh
        mode: 0755
    volumes:
      - db_data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - "app=reservas"
        - "tier=database"
        - "version=1.0.0"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ============================================
  # Backend API (NestJS) - USA SECRETS
  # ============================================
  api:
    image: arielben75/backend-reservas:v1.1.0
    networks:
      - backend
      - frontend
    environment:
      NODE_ENV: production
      ENV_PORT: 8400
      ENV_CORS: http://localhost:3039
      ENV_FILE_MAX_SIZE: 120mb
      DEBUG_SERVER: "true"
      ENV_SWAGGER_SHOW: "true"
      ENV_APP_NAME: Ariel
      # NO más DATABASE_URL ni JWT_SECRET aquí
      # El entrypoint.sh los carga desde /run/secrets/
    secrets:
      - database_url
      - jwt_secret
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - "app=reservas"
        - "tier=backend"
        - "version=1.0.0"
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
    ports:
      - target: 8400
        published: 3000
        protocol: tcp
        mode: ingress

  # ============================================
  # Analytics (Umami) - USA SECRETS
  # ============================================
  analytics:
    image: ghcr.io/umami-software/umami:postgresql-latest
    networks:
      backend:
        aliases:
          - analytics
    environment:
      # Variables no sensibles
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - TRACKER_SCRIPT_NAME=umami.js
      - DISABLE_TELEMETRY=1
    # Umami NO soporta leer secrets de archivos nativamente
    # Necesitamos un wrapper script
    secrets:
      - database_url_umami
      - umami_hash_salt
    configs:
      - source: umami_entrypoint_v1
        target: /entrypoint-wrapper.sh
        mode: 0755
    entrypoint: ["/entrypoint-wrapper.sh"]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
      labels:
        - "app=reservas"
        - "tier=analytics"
        - "version=1.0.0"
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    ports:
      - target: 3000
        published: 8080
        protocol: tcp
        mode: ingress

  # ============================================
  # Frontend (React + Nginx)
  # ============================================
  frontend:
    image: arielben75/frontend-reservas:latest
    networks:
      - frontend
      - backend
    volumes:
      - shared_data:/shared:ro
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - "app=reservas"
        - "tier=frontend"
        - "version=1.0.0"
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    ports:
      - target: 80
        published: 5173
        protocol: tcp
        mode: ingress

  # ============================================
  # Portainer (Gestión Visual de Docker Swarm)
  # ============================================
  portainer:
    image: portainer/portainer-ce:latest
    networks:
      - backend
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    volumes:
      - portainer_data:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - "app=reservas"
        - "tier=management"
        - "version=1.0.0"
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    ports:
      - target: 9000
        published: 9000
        protocol: tcp
        mode: ingress
      - target: 8000
        published: 8000
        protocol: tcp
        mode: ingress

  # ============================================
  # Portainer Agent (para comunicación con Swarm)
  # ============================================
  agent:
    image: portainer/agent:latest
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      labels:
        - "app=reservas"
        - "tier=management"
        - "version=1.0.0"
      resources:
        limits:
          cpus: "0.25"
          memory: 128M
# ============================================
# Redes
# ============================================
networks:
  backend:
    driver: overlay
    attachable: true
    labels:
      - "app=reservas"
  frontend:
    driver: overlay
    attachable: true
    labels:
      - "app=reservas"

# ============================================
# Volúmenes
# ============================================
volumes:
  db_data:
    driver: local
  shared_data:
    driver: local
  portainer_data:
    driver: local

# ============================================
# Configs
# ============================================
configs:
  init_db_v1:
    external: true
  umami_entrypoint_v1:
    external: true

# ============================================
# Secrets
# ============================================
secrets:
  postgres_password:
    external: true
  database_url:
    external: true
  jwt_secret:
    external: true
  database_url_umami:
    external: true
  umami_hash_salt:
    external: true
